"""
Django settings for stock_analysis project.

Generated by 'django-admin startproject' using Django 1.11.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '(gfrp28b6qkff!@=jy0l+!!_*p=0+_d%2d&w2)^n9f(dvj^j$r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_crontab',
    'rank_list.apps.RankListConfig',
    'stock_classified.apps.StockClassifiedConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'stock_analysis.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'stock_analysis.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'ENGINE': 'django_mysqlpool.backends.mysqlpool',
        'NAME': 'stock_analysis',  # Or path to database file if using sqlite3.
        'USER': 'root',  # Not used with sqlite3.
        'PASSWORD': 'Cqmyg14dss',  # Not used with sqlite3.
        'HOST': 'localhost',
        # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '8306',  # Set to empty string for default. Not used with sqlite3.
        'SIZE': 5,
        'OPTIONS': {
            'init_command': 'SET storage_engine=INNODB,character_set_connection=utf8,'
                            'collation_connection=utf8_unicode_ci'}
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

CRONJOBS = [
    ('* */1 * * *', 'cron_task.cron.get_last_charge_detail_by_inst_scheduled_job'),
    ('* */1 * * *', 'cron_task.cron.get_last_ranklist_detail_scheduled_job'),
    ('* */1 * * *', 'cron_task.cron.get_last_stock_basic_info_scheduled_job'),
    ('*/1 9-16/1 * * 1-5', 'cron_task.cron.get_realtime_stock_charge_info_scheduled_job'),
]

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s\t%(levelname)s\t%(threadName)s\t%(module)s:%(lineno)s'
                      + '\t%(message)s'
        },
        'simple': {
            'format': '%(asctime)s\t%(levelname)s\t%(message)s'
        },
        'detail': {
            'format': '%(asctime)s\t%(message)s'
        }
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        "file": {
            'level': "DEBUG",
            "class": "logging.FileHandler",
            "formatter": 'verbose',
            "filename": BASE_DIR + "/logs/stock_analysis.log"
        },
        "operation": {
            'level': "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            'when': 'D',
            "formatter": 'detail',
            "filename": BASE_DIR + "/logs/operation.log"
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'when': 'D',
            'filename': BASE_DIR + '/logs/error.log',
            'backupCount': 5,
            'formatter': 'verbose',
        },
        "access": {
            'level': "INFO",
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'when': 'D',
            # 'backupCount': 0,
            # 'utc': True,
            'encoding': 'utf-8',
            'formatter': 'simple',
            'filename': BASE_DIR + '/logs/access.log'
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'propagate': True,
            'level': 'DEBUG',
        },
        'django.db': {
            'handlers': ['console', 'file'],
            'propagate': True,
            'level': 'DEBUG',
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        # 'myaccess': {
        #     'handlers': ['console', 'access'],
        #     'propagate': True,
        #     'level': 'INFO',
        # },
        'operation': {
            'handlers': ['operation'],
            'propagate': True,
            'level': 'INFO',
        },
        'operation_error': {
            'handlers': ['error'],
            'propagate': True,
            'level': 'INFO',
        }

    }
}
